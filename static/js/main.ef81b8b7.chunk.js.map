{"version":3,"sources":["Components/ReviewItem/ReviewItem.jsx","Components/App.js","reportWebVitals.js","index.js"],"names":["ReviewItem","props","useState","index","setIndex","data","checkNextNumber","length","className","src","image","alt","name","job","text","onClick","checkPrevNumber","randomIndex","Math","trunc","random","defaultProps","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAWA,SAASA,EAAWC,GAChB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACQC,EAASJ,EAATI,KACR,SAASC,EAAgBH,GACrB,OAAIA,GAAUE,EAAKE,OAAS,EACjB,EAEAJ,EAAQ,EA2BvB,OACI,qBAAKK,UAAU,qBAAf,SACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,mBACf,qBAAKA,WAAS,EAACC,IAAKJ,EAAKF,GAAOO,MAAOC,IAAI,QAE/C,sBAAKH,UAAU,mBAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBH,EAAKF,GAAOS,OACnC,mBAAGJ,UAAU,MAAb,SAAoBH,EAAKF,GAAOU,MAChC,mBAAGL,UAAU,cAAb,SAA4BH,EAAKF,GAAOW,OACxC,sBAAKN,UAAU,YAAf,UACI,wBAAQO,QAxB5B,WACIX,GAAS,SAACD,GACN,OAdR,SAAyBA,GACrB,OAAIA,GAAS,EACFE,EAAKE,OAAO,EAEZJ,EAAQ,EAURa,CAAgBb,OAsBkBK,UAAU,qBAAvC,SAA4D,mBAAGA,UAAU,0BACzE,wBAAQO,QA9B5B,WACIX,GAAS,SAACD,GACN,OAAOG,EAAgBH,OA4BkBK,UAAU,qBAAvC,SAA4D,mBAAGA,UAAU,8BAE7E,wBAAQO,QAtBxB,WACI,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAASf,EAAKE,QAC7CU,GAAed,IACdc,GAA2B,GAE/Bb,EAASE,EAAgBW,KAiBcT,UAAU,yBAArC,+BArDpBR,EAAWqB,aAAe,CACtBhB,KAAM,IA2DKL,Q,OC9CAsB,MAnBf,WACE,OACE,qBAAKC,GAAG,UAAR,SACE,qBAAKA,GAAG,SAAR,SACE,qBAAKf,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,cAAd,yBACA,qBAAKA,UAAU,iBAEjB,cAAC,EAAD,CAAYH,KAAMA,cCAfmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ef81b8b7.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nReviewItem.propTypes = {\r\n    data: PropTypes.array\r\n};\r\n\r\nReviewItem.defaultProps = {\r\n    data: []\r\n}\r\n\r\nfunction ReviewItem(props) {\r\n    const [index, setIndex] = useState(0);\r\n    const { data } = props;\r\n    function checkNextNumber(index) {\r\n        if (index >= (data.length - 1)) {\r\n            return 0;\r\n        } else {\r\n            return index + 1;\r\n        }\r\n    };\r\n    function checkPrevNumber(index) {\r\n        if (index <= 0) {\r\n            return data.length-1;\r\n        } else {\r\n            return index - 1;\r\n        }\r\n    };\r\n    function nextPerson() {\r\n        setIndex((index) => {\r\n            return checkNextNumber(index)\r\n        });\r\n    };\r\n    function prevPerson() {\r\n        setIndex((index) => {\r\n            return checkPrevNumber(index)\r\n        });\r\n    };\r\n    function randomMe(){\r\n        let randomIndex = Math.trunc(Math.random()*data.length);\r\n        if(randomIndex == index){\r\n            randomIndex = randomIndex +1;\r\n        }\r\n        setIndex(checkNextNumber(randomIndex));\r\n    }\r\n    return (\r\n        <div className=\"col-12 text-center\">\r\n            <div className=\"review-item\">\r\n                <div className=\"review-item-image mb-3\">\r\n                    <div className=\"img-background\" />\r\n                    <img className src={data[index].image} alt=\"\" />\r\n                </div>\r\n                <div className=\"review-item-info\">\r\n                    <h5 className=\"title\">{data[index].name}</h5>\r\n                    <p className=\"job\">{data[index].job}</p>\r\n                    <p className=\"description\">{data[index].text}</p>\r\n                    <div className=\"icon mb-3\">\r\n                        <button onClick={prevPerson} className=\"button button-icon\"><i className=\"fas fa-chevron-left\" /></button>\r\n                        <button onClick={nextPerson} className=\"button button-icon\"><i className=\"fas fa-chevron-right\" /></button>\r\n                    </div>\r\n                    <button onClick={randomMe} className=\"button button-surprise\">Random Me</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReviewItem;","import ReviewItem from \"./ReviewItem/ReviewItem\";\nimport data from \"./Data.json\";\nfunction App() {\n  return (\n    <div id=\"wrapper\">\n      <div id=\"review\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12 mb-5\">\n              <h4 className=\"text-center\">Our Reviews</h4>\n              <div className=\"underline\" />\n            </div>\n            <ReviewItem data={data}></ReviewItem>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}